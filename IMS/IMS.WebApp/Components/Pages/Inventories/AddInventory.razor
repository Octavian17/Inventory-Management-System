@page "/addInventory"

@inject IAddInventoryUseCase addInventoryUseCase
@inject NavigationManager navigationManager

<h3>AddInventory</h3>
<br />

<EditForm Model="inventory" FormName="formInventory" OnValidSubmit="Save">

	<DataAnnotationsValidator></DataAnnotationsValidator>
	<ValidationSummary></ValidationSummary>

	<div class="form-group">
		<label for="name">Inventory Name</label>
		<InputText id="name" class="form-control" @bind-Value="inventory.InventoryName" />
		<ValidationMessage For="@(() => inventory.InventoryName)"></ValidationMessage>
	</div>

	<div class="form-group">
		<label for="quantity">Inventory Quantity</label>
		<InputNumber id="quantity" class="form-control" @bind-Value="inventory.Quantity" />
		<ValidationMessage For="@(() => inventory.Quantity)"></ValidationMessage>
	</div>

	<div class="form-group">
		<label for="price">Inventory Price</label>
		<InputNumber id="price" class="form-control" @bind-Value="inventory.Price" />
		<ValidationMessage For="@(() => inventory.Price)"></ValidationMessage>
	</div>

	<br />

	<button type="submit" class="btn btn-primary">Save</button>
	&nbsp;
	<a href="/inventories" class="btn btn-primary">Cancel</a>

</EditForm>

@code {
	[SupplyParameterFromForm]
	private InventoryViewModel inventory { get; set; } = new InventoryViewModel();	


	private async Task Save()
	{
		var inv = new Inventory
		{
            InventoryId = inventory.InventoryId,
			InventoryName = inventory.InventoryName,
			Quantity = inventory.Quantity,
			Price = inventory.Price
        };

		await addInventoryUseCase.ExecuteAsync(inv);

		navigationManager.NavigateTo("/inventories");
	}
}
