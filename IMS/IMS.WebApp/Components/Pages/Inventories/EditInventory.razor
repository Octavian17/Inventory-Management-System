@page "/editinventory/{invId:int}"

@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase
@inject IEditInventoryUseCase EditInventoryUseCase
@inject NavigationManager NavigationManager

<h3>Edit Inventory</h3>
<br>

@if (inventory is not null)
{
	<EditForm Model="inventory" FormName="formInventory" OnValidSubmit="Update">
		<DataAnnotationsValidator></DataAnnotationsValidator>
		<ValidationSummary></ValidationSummary>

		<InputNumber @bind-Value="inventory.InventoryId" hidden />

		<div class="form-group">
			<label for="name">Inventory Name</label>
			<InputText id="name" class="form-control" @bind-Value="inventory.InventoryName" />
			<ValidationMessage For="@(() => inventory.InventoryName)"></ValidationMessage>
		</div>
		<div class="form-group">
			<label for="quantity">Inventory Quantity</label>
			<InputNumber id="quantity" class="form-control" @bind-Value="inventory.Quantity" />
			<ValidationMessage For="@(() => inventory.Quantity)"></ValidationMessage>
		</div>
		<div class="form-group">
			<label for="price">Inventory Price</label>
			<InputNumber id="price" class="form-control" @bind-Value="inventory.Price" />
			<ValidationMessage For="@(() => inventory.Price)"></ValidationMessage>
		</div>
		<br>
		<button type="submit" class="btn btn-primary">Update</button>
		&nbsp;
		<a href="/inventories" class="btn btn-primary">Cancel</a>
		
	</EditForm>
}

@code {

	[Parameter]
	public int InvId { get; set; }

	[SupplyParameterFromForm]
	private InventoryViewModel? inventory { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		Inventory inv = await ViewInventoryByIdUseCase.ExecuteAsync(this.InvId);

		this.inventory = new InventoryViewModel
		{
			InventoryId = inv.InventoryId,
			InventoryName = inv.InventoryName,
			Quantity = inv.Quantity,
			Price = inv.Price
		};
	}

	private async Task Update()
	{
		if(inventory is not null)
		{
			Inventory inv = new Inventory
			{
				InventoryId = inventory.InventoryId,
				InventoryName = inventory.InventoryName,
				Quantity = inventory.Quantity,
				Price = inventory.Price
			};
			await EditInventoryUseCase.ExecuteAsync(inv);
			NavigationManager.NavigateTo("/inventories");
		}
	}
}
