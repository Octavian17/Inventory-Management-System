@page "/editproduct/{prodId:int}"

@inject IViewProductByIdUseCase ViewProductByIdUseCase	
@inject IEditProductUseCase EditProductUseCase
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<h3>Edit Product</h3>
<br>

@if (product is not null)
{
	<EditForm Model="product" OnValidSubmit="Update">

		<DataAnnotationsValidator></DataAnnotationsValidator>
		<ValidationSummary></ValidationSummary>

		<div class="form-group">
			<label for="name">Product Name</label>
			<InputText id="name" class="form-control" @bind-Value="product.ProductName" />
		</div>

		<div class="form-group">
			<label for="quantity">Product Quantity</label>
			<InputNumber id="quantity" class="form-control" @bind-Value="product.Quantity" />
		</div>

		<div class="form-group">
			<label for="price">Product Price</label>
			<InputNumber id="price" class="form-control" @bind-Value="product.Price" />
		</div>

		<div class="form-group">
			<label for="inventories">Inventories</label>
			@if (this.product is not null &&
					this.product.ProductInventory is not null &&
					this.product.ProductInventory.Count > 0)
			{
				<table class="table">
					<thead>
						<tr>
							<th>Name</th>
							<th>Quantity</th>
							<th></th>
						</tr>
					</thead>

					<tbody>
						@foreach (var prodInventory in this.product.ProductInventory)
						{
							<tr>
								<td>@prodInventory.Inventory?.InventoryName</td>
								<td>
									<input type="number" min="0" @bind-value="prodInventory.InventoryQuantity" />
								</td>
								<td>
									<buttton class="btn btn-link" type="button" @onclick="() => RemoveInventory(prodInventory)">Remove</buttton>
								</td>
							</tr>
						}
					</tbody>
				</table>
			}
		</div>

		<br />

		<button type="submit" class="btn btn-primary">Save</button>
		&nbsp;
		<a href="/products" class="btn btn-primary">Cancel</a>

	</EditForm>
}

@code {

	[Parameter]
	public int ProdId { get; set; }

	private Product? product { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		this.product ??= await ViewProductByIdUseCase.ExecuteAsync(this.ProdId);
	}

	private void RemoveInventory(ProductInventory productInventory)
	{
		this.product?.RemoveInventory(productInventory);
	}

	private async Task Update()
	{
		if (product is not null)
		{
			await EditProductUseCase.ExecuteAsync(product);
			NavigationManager.NavigateTo("/products");
		}
	}
}