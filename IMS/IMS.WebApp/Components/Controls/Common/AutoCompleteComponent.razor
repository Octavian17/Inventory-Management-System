<div class="form-group">
    <label for="search">@Label</label>
    <input type="text" class="form-control" @bind-value="userInput" @bind-value:event="oninput" 
            @onkeyup="OnKeyUp"/>
</div>

@if(searchResults is not null && searchResults.Count > 0)
{
    <div class="search-result">
        <ul>
            @{
				int itemIndex = 0;
                foreach (var item in searchResults)
                {
                    <li class="@(itemIndex == currentIndexItem?"selected":"")" @key="item.Id" @onclick="() => HandleSelectItem(item)">
                        @item.Name
                    </li>
					itemIndex++;
                }
            }
            
        </ul>
    </div>
}

@code {
    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public Func<string, List<ItemViewModel>>? SearchFunction { get; set; }

    [Parameter]
    public EventCallback<ItemViewModel?> OnItemSelected { get; set; }

    private string _userInput = string.Empty;

    private List<ItemViewModel>? searchResults = null;

    private ItemViewModel? selectedItem = null;

    public string userInput 
    { 
        get => _userInput; 
        set
        {
            _userInput = value;
            if (!string.IsNullOrWhiteSpace(_userInput) && SearchFunction != null)
            {
                searchResults =  SearchFunction(_userInput);
            }
        } 
    }

    private ItemViewModel? currentItem = null;
    private int currentIndexItem = -1;

    private void HandleSelectItem(ItemViewModel? item)
    {
        ClearHighlighting();

        if(item !=null)
        {
            this.selectedItem = item;
            this.userInput = item?.Name ?? string.Empty;
            this.searchResults = null;

            OnItemSelected.InvokeAsync(item);
        }        
    }

    private void ClearHighlighting()
    {
        searchResults = null;
        currentItem = null;
        currentIndexItem = -1;
    }

    private void OnKeyUp(KeyboardEventArgs e)
    {
        if(searchResults is not null && searchResults.Count > 0 && (e.Code =="ArrowDown" || e.Code == "ArrowUp"))
        {
            if (e.Code == "ArrowDown" && currentIndexItem < searchResults.Count - 1)
            {
                currentItem = searchResults[++currentIndexItem];

            }
            else if (e.Code == "ArrowUp")
            {
                if(currentIndexItem > 0)
                {
                    currentItem = searchResults[--currentIndexItem];
                }
                else
                {
                    currentItem = null;
                    currentIndexItem = -1;
                }
            }
        }
        else if(e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            HandleSelectItem(currentItem);
        }
    }

    public class ItemViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}
